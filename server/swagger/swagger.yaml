---
swagger: "2.0"
info:
  description: "HR Database Application"
  version: "1.0.0"
  title: "HRApp"
  contact:
    email: "bart00@hitachi-id.com"
host: "localhost:8080"
basePath: "/v2"
tags:
- name: "person"
  description: "Personnel data"
- name: "user"
  description: "HR User operations"
schemes:
- "https"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /person:
    get:
      tags:
      - "person"
      summary: "Returns all personnel"
      description: "Returns a list of all personnel"
      operationId: "controllers.default_controller.get_personnel"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Person"
      security:
      - api_key: []
      x-tags:
      - tag: "person"
    post:
      tags:
      - "person"
      summary: "Add a new person to the HR database"
      description: ""
      operationId: "controllers.default_controller.add_person"
      parameters:
      - in: "body"
        name: "body"
        description: "Person object that needs to be added to the HR database"
        required: true
        schema:
          $ref: "#/definitions/Person"
      responses:
        405:
          description: "Invalid input"
      security:
      - api_key: []
      x-tags:
      - tag: "person"
  /person/findByStatus:
    get:
      tags:
      - "person"
      summary: "Finds personnel by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "controllers.default_controller.find_personnel_by_status"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "Active"
          - "On Leave"
          - "Terminated"
          default: "Active"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Person"
        400:
          description: "Invalid status value"
      security:
      - api_key: []
      x-tags:
      - tag: "person"
  /person/{personId}:
    get:
      tags:
      - "person"
      summary: "Find person by ID"
      description: "Returns a single person"
      operationId: "controllers.default_controller.get_person_by_id"
      parameters:
      - name: "personId"
        in: "path"
        description: "ID of person to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Person"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Person not found"
      security:
      - api_key: []
      x-tags:
      - tag: "person"
    post:
      tags:
      - "person"
      summary: "Updates a person in the database"
      description: ""
      operationId: "controllers.default_controller.update_person"
      parameters:
      - name: "personId"
        in: "path"
        description: "ID of person that needs to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated data for the person"
        required: true
        schema:
          $ref: "#/definitions/Person"
      responses:
        405:
          description: "Invalid input"
      security:
      - api_key: []
      x-tags:
      - tag: "person"
    delete:
      tags:
      - "person"
      summary: "Deletes a person"
      description: ""
      operationId: "controllers.default_controller.delete_person"
      parameters:
      - name: "personId"
        in: "path"
        description: "Person id to delete"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Person not found"
      security:
      - api_key: []
      x-tags:
      - tag: "person"
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Department:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
    xml:
      name: "Department"
  Location:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      address:
        type: "string"
      postal_code:
        type: "string"
      city:
        type: "string"
      state:
        type: "string"
    xml:
      name: "Location"
  Person:
    type: "object"
    properties:
      id:
        type: "string"
      first_name:
        type: "string"
      last_name:
        type: "string"
      department:
        $ref: "#/definitions/Department"
      location:
        $ref: "#/definitions/Location"
      manager:
        $ref: "#/definitions/Person"
      status:
        type: "string"
        description: "Personnel status"
        enum:
        - "Active"
        - "On Leave"
        - "Terminated"
      hire_date:
        type: "string"
        format: "date"
      term_date:
        type: "string"
        format: "date"
      effective_date:
        type: "string"
        format: "date"
        description: "Effective date of change"
    xml:
      name: "person"
